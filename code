//code
#include "stm32f10x.h"
#include "stm32f10x_gpio.h"
#include "stm32f10x_rcc.h"
#include "stm32f10x_usart.h"
#include "string.h"

void UART1_Config(void);
void GPIO_Config(void);
void UART1_SendChar(char c);
void UART1_SendStr(char *str);
char UART1_GetChar(void);

int main(void) {
    char rx_buffer[10];
    int idx = 0;

    GPIO_Config();     
    UART1_Config();      

    for (volatile int i = 0; i < 1000000; i++);

    UART1_SendStr("Hello from STM32!\r\n");

    while (1) {
        if (USART_GetFlagStatus(USART1, USART_FLAG_RXNE) != RESET) {
            char c = UART1_GetChar();   
            UART1_SendChar(c);          

            if (c == '\r' || c == '\n') { 
                rx_buffer[idx] = '\0';   

                if (strcmp(rx_buffer, "ON") == 0) {
                    GPIO_ResetBits(GPIOA, GPIO_Pin_0); 
                    UART1_SendStr("\r\nLED ON\r\n");
                } else if (strcmp(rx_buffer, "OFF") == 0) {
                    GPIO_SetBits(GPIOA, GPIO_Pin_0);  
                    UART1_SendStr("\r\nLED OFF\r\n");
                } 
                idx = 0; 
            } else {
                if (idx < sizeof(rx_buffer) - 1) {
                    rx_buffer[idx++] = c;
                }
            }
        }
    }
}

void UART1_Config(void) {
    GPIO_InitTypeDef GPIO_InitStructure;
    USART_InitTypeDef USART_InitStructure;

    RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA | RCC_APB2Periph_USART1, ENABLE);

    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_9;
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    GPIO_Init(GPIOA, &GPIO_InitStructure);

    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_10;
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
    GPIO_Init(GPIOA, &GPIO_InitStructure);

    USART_InitStructure.USART_BaudRate = 9600;
    USART_InitStructure.USART_WordLength = USART_WordLength_8b;
    USART_InitStructure.USART_StopBits = USART_StopBits_1;
    USART_InitStructure.USART_Parity = USART_Parity_No;
    USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
    USART_InitStructure.USART_Mode = USART_Mode_Tx | USART_Mode_Rx;
    USART_Init(USART1, &USART_InitStructure);

    USART_Cmd(USART1, ENABLE);
}

void GPIO_Config(void) {
    GPIO_InitTypeDef GPIO_InitStructure;

    RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA, ENABLE);

    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0;
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    GPIO_Init(GPIOA, &GPIO_InitStructure);

    GPIO_SetBits(GPIOA, GPIO_Pin_0); 
}

void UART1_SendChar(char c) {
    while (USART_GetFlagStatus(USART1, USART_FLAG_TXE) == RESET);
    USART_SendData(USART1, c);
}

void UART1_SendStr(char *str) {
    while (*str) {
        UART1_SendChar(*str++);
    }
}

char UART1_GetChar(void) {
    while (USART_GetFlagStatus(USART1, USART_FLAG_RXNE) == RESET);
    return USART_ReceiveData(USART1);
}
